{"name":"Activeasync","body":"# ActiveAsync\r\n\r\nActiveAsync aims to provide an interface for easily setting up ActiveRecord objects\r\nand ruby classes to run methods asynchronously.\r\n\r\nActiveAsync currently depends on Resque and ActiveSupport.\r\n\r\nRuby support:\r\n- 1.8.7\r\n- 1.9.2\r\n- 1.9.3\r\n\r\n[![Build Status](https://secure.travis-ci.org/challengepost/activeasync.png)](http://travis-ci.org/challengepost/activeasync)\r\n\r\n## Install\r\n\r\nIn your Gemfile\r\n\r\n    gem \"activeasync\"\r\n\r\nOr via command line\r\n\r\n    gem install activeasync\r\n\r\n\r\n## Usage\r\n\r\nBackground class methods\r\n\r\n``` ruby\r\nrequire 'active_async'\r\n\r\nclass HeavyLifter\r\n  include ActiveAsync::Async\r\n\r\n  def self.lift(*stuff)\r\n    # heavy lifting\r\n  end\r\nend\r\n\r\nHeavyLifter.async(:lift, 1, 2, 3)\r\n```\r\n\r\nWith ActiveRecord and Rails\r\n\r\n``` ruby\r\n# config/application.rb\r\nrequire 'active_async/railtie'\r\n\r\n# app/models/risky_business.rb\r\nclass RiskyBusiness < ActiveRecord::Base\r\n  def party_time\r\n    # all night long\r\n  end\r\nend\r\n\r\nbusiness = RiskyBusiness.last\r\nbusiness.async(:party_time)     # runs business#party_time asynchronously\r\n```\r\n\r\nRun callbacks asynchronously\r\n\r\n``` ruby\r\nclass LateNite < ActiveRecord::Base\r\n  after_save :drive_home, :async => true\r\n\r\n  def drive_home\r\n    # traffic jam\r\n  end\r\nend\r\n\r\nlate_nite = LateNite.last\r\nlate_nite.save                # runs late_night#drive_home asynchronously after save\r\n```\r\n\r\n## RSpec\r\n\r\nActiveAsync comes with some helpers support for RSpec.\r\n\r\nTo remove Resque dependency from some of your specs, use the :stub_resque option in\r\nselected spec blocks. Async methods will run in the foreground.\r\n\r\n``` ruby\r\n# spec/spec_helper.rb\r\nrequire 'active_async/rspec'\r\n\r\n# spec/models/late_nite_spec.rb\r\nit \"drive home after late nite save\", :stub_resque do\r\n  # all methods run in foreground\r\nend\r\n```\r\n\r\nYou can also manually set the Async background adapter to `ActiveAsync::FakeResque` or \r\nany similar module/class that responds to `#enqueue(*args)`:\r\n\r\n``` ruby\r\nbefore do\r\n  ActiveAsync.background = ActiveAsync::FakeResque\r\nend\r\n```\r\n\r\n## Contributing\r\n\r\nTo contribute to activeasync, clone the project and submit pull requests in a branch with tests.\r\n\r\nTo run tests, install the bundle and migrate the test database:\r\n\r\n    $ bundle\r\n    $ cd spec/dummy && bundle exec rake db:migrate db:test:prepare\r\n","tagline":"Async interface for ActiveRecord and ruby classes","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}